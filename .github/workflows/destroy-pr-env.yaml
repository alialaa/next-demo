name: Destroy PR Environment
on:
  issue_comment:
    types: [created]
  pull_request_target:
    types: [closed]

jobs:
  check-env:
    runs-on: ubuntu-latest
    if: ${{ (github.event.issue.pull_request && github.event.issue.state == 'open' && github.event.comment.body == '/destroy') || github.event_name == 'pull_request_target' }}
    outputs:
      env-name: ${{ steps.get-env-name.outputs.aws_env }}
    steps:
      - run: echo '${{ toJson(github.event) }}'
      - name: Check that PR is deployed
        id: get-env-name
        run: echo "aws_env=$(aws elasticbeanstalk describe-environments --application-name nextjs-starter --environment-names my-app-pr-${{ github.event.issue.number || github.event.pull_request.number }} --query "Environments[*].EnvironmentName" --output text)" >> $GITHUB_OUTPUT
      - run: echo ${{ steps.get-env-name.outputs.aws_env }}
  destroy-pr-env:
    needs: check-env
    if: needs.check-env.outputs.env-name != ''
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - name: Install EB CLI
        id: install-eb-cli
        run: pip install awsebcli
      - name: Destroy Environment
        run: |
          eb init nextjs-starter --platform "Node.js 18 running on 64bit Amazon Linux 2" --region eu-west-2 
          eb terminate ${{ needs.check-env.outputs.env-name }}
      - name: Get Pull Request Head Ref
        if: github.event_name == 'issue_comment'
        id: get-head-ref
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const response = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
            });
            return response.data.head.ref
      - run: echo ${{ github.event.pull_request.head.ref || steps.get-head-ref.outputs.result }}
      - name: Get deployment ID
        uses: actions/github-script@v6
        id: get-latest-deployment
        with:
          result-encoding: string
          script: |
            const response = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "${{ github.event.pull_request.head.ref || steps.get-head-ref.outputs.result  }}",
              per_page: 1
            });
            return response.data.length > 0 ? response.data[0].id : ""
      - run: echo ${{ steps.get-latest-deployment.outputs.result }}
      - name: Add Inactive Status
        if: steps.get-latest-deployment.outputs.result != ''
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.get-latest-deployment.outputs.result }},
              state: 'inactive',
            });
            console.log(response)

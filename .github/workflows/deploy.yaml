name: Deploy
on:
  workflow_dispatch:
    inputs:
      # ref:
      #   description: "The REF to deploy"
      #   type: string
      aws-env:
        description: "AWS Elastic Beanstalk Environment"
        required: true
        default: "my-app-staging"
        type: string
      github-env:
        description: "Github Environment"
        required: true
        default: "staging"
        type: string
      report-pr:
        description: "PR to add report comments to"
        type: number
  workflow_call:
    outputs:
      aws_env_url:
        description: "Deployment URL"
        value: ${{ jobs.deploy.outputs.aws_env_url }}
    inputs:
      # ref:
      #   description: "The REF to deploy"
      #   type: string
      aws-env:
        description: "AWS Elastic Beanstalk Environment"
        required: true
        default: "my-app-staging"
        type: string
      github-env:
        description: "Github Environment"
        required: true
        default: "staging"
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.aws-env }}-${{ inputs.github-env }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
    outputs:
      aws_env_url: ${{ steps.get-cname.outputs.aws_env_url}}
    environment:
      name: ${{ inputs.github-env }}
      url: "http://${{ steps.get-cname.outputs.aws_env_url }}"
    steps:
      - uses: actions/github-script@v6
        id: get-token
        with:
          result-encoding: string
          script: |
            const token = await core.getIDToken()  
            return token
      - run: echo ${{steps.get-token.outputs.result}} > token.txt
      - uses: actions/upload-artifact@v3
        with:
          name: token
          path: token.txt
      - name: Avoid deploying to production using a non production env
        if: inputs.aws-env == 'my-app-prod' && inputs.github-env != 'production'
        run: |
          echo "::error::Cannot deploy to production using a non prodcuction environment"
          exit 1
      - name: Update Pull Request (Start)
        uses: actions/github-script@v6
        if: inputs.report-pr
        continue-on-error: true
        with:
          script: |
            const comment = `### ⏳ Deployment in progress...

            [You can monitor the progress here.](https://github.com/${{github.repository}}/actions/runs/${{ github.run_id }})
            `;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.report-pr }},
              body: comment
            })
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
          # ref: ${{ inputs.ref }}
      - name: Steup Node Environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
      - name: Install Dependencies
        run: npm ci

      - run: npm run build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::245468275777:role/deploy-next-app
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - name: Install EB CLI
        id: install-eb-cli
        run: pip install awsebcli
      - id: get-env-name
        run: echo "aws_env=$(aws elasticbeanstalk describe-environments --application-name nextjs-starter --environment-names ${{ inputs.aws-env }} --query "Environments[0].EnvironmentName" --output text)" >> $GITHUB_OUTPUT
      - id: get-env-status
        run: echo "aws_env_status=$(aws elasticbeanstalk describe-environments --application-name nextjs-starter --environment-names ${{ inputs.aws-env }} --query "Environments[0].Status" --output text)" >> $GITHUB_OUTPUT
      - name: Create a New Environment
        if: steps.get-env-name.outputs.aws_env == 'None' || steps.get-env-status.outputs.aws_env_status == 'Terminated'
        run: |
          eb init nextjs-starter --platform "Node.js 18 running on 64bit Amazon Linux 2" --region eu-west-2 
          eb create ${{ inputs.aws-env }} --envvars FLAGSMITH_KEY=${{ secrets.FLAGSMITH_KEY }} --instance-types t3.large,t3.medium --cname ${{ inputs.aws-env }}
      - name: Deploy
        # You can do something when a publish should happen.
        run: |
          eb init nextjs-starter --platform "Node.js 18 running on 64bit Amazon Linux 2" --region eu-west-2 
          eb deploy ${{ inputs.aws-env }}
      - name: Get deployment URL
        id: get-cname
        run: echo "aws_env_url=$(aws elasticbeanstalk describe-environments --application-name nextjs-starter --environment-names ${{ inputs.aws-env }} --query "Environments[0].CNAME" --output text)" >> $GITHUB_OUTPUT
      - name: Send GitHub Action trigger data to Slack workflow
        uses: slackapi/slack-github-action@v1
        continue-on-error: true
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚀 Deployment to AWS environment *${{inputs.aws-env}}* using *${{ inputs.github-env }}* GitHub wnvironment  was successfull. <http://${{ steps.get-cname.outputs.aws_env_url }}|View Deployment>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      - name: Update Pull Request (Success)
        uses: actions/github-script@v6
        if: success() && inputs.report-pr
        continue-on-error: true
        with:
          script: |
            const comment = `### 🚀 Depolyment Completed.

            You can view the depolyed environment here: http://${{ steps.get-cname.outputs.aws_env_url }}`

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.report-pr }},
              body: comment
            })
      - name: Update Pull Request (Failure)
        uses: actions/github-script@v6
        if: failure() && inputs.report-pr
        continue-on-error: true
        with:
          script: |
            const comment = `### 🛑 Depolyment Failed.

            [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.report-pr }},
              body: comment
            })
      - name: Abort if Cancelled
        if: cancelled() && steps.install-eb-cli.conclusion == 'success'
        run: eb abort ${{ inputs.aws-env }}
